(* ::Package:: *)

$RadVersion=4.32  (* March 2017 *)

(*___ ___ ___ ___ ___ _   Copyright Notice   ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ _

Radia is copyright European Synchrotron Radiation Facility.
Portions copyright Synchrotron SOLEIL.
Portions copyright Wolfram Research, Inc.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to use, copy, modify, and distribute the Software without
 restriction, provided the Software, including any modified copies made
 under this license, is not distributed for a fee, subject to
 the following conditions:
 
 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
  
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE EUROPEAN SYNCHROTRON RADIATION FACILITY BE LIABLE
 FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ______ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___*)
 
  (***********************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which typically
will have the same name as this file except ending in ".nb" instead of
".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent to
using the Evaluate Initialization Cells menu command in the front end.

DO NOT EDIT THIS FILE.  This entire file is regenerated automatically 
each time the parent Notebook file is saved in the Mathematica front end.
Any changes you make to this file will be overwritten.
***********************************************************************)


(* --------- Usages ----------------------- *)

RadLinkPattern::usage="RadLinkPattern[] gives the Link patterns of a routine in Radia.exe"

RadMatNdFeB::usage="RadMatNdFeB[Mr:1.2] creates a NdFeB magnetic material with remanent magnetization Mr. The direction of the remanent magnetization vector is defined by the initial magnetization vector in the object to which the material is later applied." 

RadMatSmCo5::usage="RadMatSmCo5[Mr:0.85] creates a SmCo5 magnetic material with remanent magnetization Mr. The direction of the remanent magnetization vector is defined by the initial magnetization vector in the object to which the material is later applied." 

RadMatSm2Co17::usage="RadMatSm2Co17[Mr:1.05] creates a Sm2Co17 magnetic material with remanent magnetization Mr. The direction of the remanent magnetization vector is defined by the initial magnetization vector in the object to which the material is later applied." 

RadMatFerrite::usage="RadMatFerrite[Mr:0.35] creates a Ferrite magnetic material with remanent magnetization Mr. The direction of the remanent magnetization vector is defined by the initial magnetization vector in the object to which the material is later applied." 

RadMatXc06::usage="RadMatXc06[] creates an inexpensive Low Carbon Steel with C<0.06% [AFNOR]."

RadMatSteel37::usage="RadMatSteel37[] creates an inexpensive Steel with C<0.13%."
 
RadMatSteel42::usage="RadMatSteel42[] creates an inexpensive Steel with C<0.19%."
 
RadMatAFK502::usage="RadMatAFK502[] creates a Vanadium Permendur type material from MetalImphy (Fe : 49%, Co: 49%, V: 2%) similar to Vacoflux50 from VacuumSchmelze."

RadMatAFK1::usage="RadMatAFK1[] creates an inexpensive FeCo Alloy from MetalImphy (Fe : 74.2, Co: 25%, Cr: 0.3%, Mn: 0.5%)."

RadTrfZerPara::usage="RadTrfZerPara[Obj,{Ptx,Pty,Ptz},{Vx,Vy,Vz}] creates an Object Mirror of Obj with respect to the plane with normal {Vx,Vy,Vz} and passing by the point {Ptx,Pty,Ptz}. The Object Mirror presents the same geometry as Obj, but its magnetization and/or current densities are modified in such a way that the magnetic field produced by the Obj and its Mirror in the plane of mirroring is perpendicular to this plane."

RadTrfZerPerp::usage="RadTrfZerPerp[Obj,{Ptx,Pty,Ptz},{Vx,Vy,Vz}] creates an Object Mirror of Obj with respect to the plane with normal {Vx,Vy,Vz} and passing by the point {Ptx,Pty,Ptz}. The Object Mirror presents the same geometry as Obj, but its magnetization and/or current densities are modified in such a way that the magnetic field produced by the Obj and its Mirror in the plane of mirroring is parallel to this plane."

RadTrfAxisPerm::usage="RadTrfAxisPerm[n] creates a space transformation corresponding to the combination of n successive circular permutations of the x,y and z axes."

RadObjFullMag::usage="RadObjFullMag[{Ptx,Pty,Ptz},{Wx,Wy,Wz},{Mx,My,Mz},{Kx,Ky,Kz},ObjCont,Mat,{R,G,B}] creates a parallellepipedic block with center point {Ptx,Pty,Ptz}, dimensions {Wx,Wy,Wz} and color {R,G,B}. The block is magnetized according to {Mx,My,Mz} then subdivided according to {Kx,Ky,Kz} and added into the container ObjCont. ObjCont should be defined in advance by calling radObjCnt[]."

RadSolve::usage="RadSolve[Obj,Prec,MaxIter,Method:0] builds an interaction matrix for the object Obj and performs a relaxation procedure. The relaxation stops whenever the change of magnetization (averaged over all sub-elements) between two successive iterations is smaller than Prec or the number of iterations is larger than MaxIter. The interaction matrix is deleted. Method is an integer number specifying the method of relaxation to be used, values between 3 and 5 must be used. If no value is entered, a default method is automatically selected."

RadUtiSave::usage="RadUtiSave[Elem,FilePath] saves internal representation data of Elem (that can be a Radia 3D object, transformation, material, etc., or a list of those) to a binary file; FilePath is a full path with a name of this file to be created."

RadUtiLoad::usage="RadUtiLoad[FilePath] loads internal representation data of an element or a list of elements (that can be Radia 3D objects, transformations, materials, etc.) from a binary file with the full path FilePath, previously created by RadUtiSave[Elem,FilePath] function; return index (or list of indexes) of elements loaded."

RadUtiMem::usage="RadUtiMem[] saves some memory in the Mathematica Kernel"   

RadUtiVer::usage="RadUtiVer[] returns the Radia version number."

RadPlotOptions::usage="RadPlotOptions[] sets Default Options for the Plot function."

RadPlot3DOptions::usage="RadPlot3DOptions[] sets Default Options for the Graphics3D and Plot3D functions."

RadObjExtRtg::usage="RadObjExtRtg[{{x1,y1,z1},{Wx1,Wy1}},{{x2,y2,z2},{Wx2,Wy2}},{Mx,My,Mz}:{0,0,0}] creates a magnetized polyhedron volume bound by six faces. Two faces are rectangles parallel to each other and perpendicular to the z direction. The rectangles 1 and 2 are defined by their centers of gravity {x1,y1,z1}, {x2,y2,z2} and dimensions in x and y directions {Wx1,Wy1}, {Wx2,Wy2}. The other 4 faces are trapezoids and connect the sides of the rectangle 1 and 2 which are parallel to each other. {Mx,My,Mz} is the magnetization."



(* --------- Plot Options --------- *)

ListQ3[w_]:=VectorQ[w, NumberQ] && If[Dimensions[w]=={3},True,False]

RadPlotOptions[]:=(
$DefaultFont={"Times",12};
SetOptions[{ListPlot,Plot}
,AxesStyle->Thickness[0.001]    
,PlotStyle->Thickness[0.002]  	
,Axes->True
,Frame->True
,GridLines->Automatic
,RotateLabel->False
,PlotRange->All];
);

RadPlot3DOptions[]:=(
$DefaultFont={"Times",12};
SetOptions[Graphics3D
,Axes->True
,AxesLabel->{"X ","Y ","Z "}
,AxesStyle->Thickness[0.003]
,BoxStyle->{Thickness[0.001],Dashing[{0.01,0.01}]}
,PlotRange->All
,SphericalRegion->True
,ViewPoint->{3.5, -2, 1.5}]);


(* --------- General Use --------- *)

RadLinkPattern[]:=LinkPatterns[Radlk]


(* --------- Magnetic Materials --------- *)

RadMatNdFeB[{Mx_,My_,Mz_},Mr_:1.2]:=
Module[{r},
r=Mr/Sqrt[Mx^2+My^2+Mz^2];
radMatLin[{0.06,0.17},{r*Mx,r*My,r*Mz}]]/;
NumberQ[Mx] /; NumberQ[My] /; NumberQ[Mz] /; NumberQ[Mr]

RadMatNdFeB[Mr_:1.2]:= radMatLin[{0.06,0.17},Mr]/; NumberQ[Mr]

RadMatSmCo5[{Mx_,My_,Mz_},Mr_:0.85]:=
Module[{r},
r=Mr/Sqrt[Mx^2+My^2+Mz^2];
radMatLin[{0.005,0.04},{r*Mx,r*My,r*Mz}]]/;
NumberQ[Mx] /; NumberQ[My] /; NumberQ[Mz] /; NumberQ[Mr]

RadMatSmCo5[Mr_:0.85]:= radMatLin[{0.005,0.04},Mr]/; NumberQ[Mr]

RadMatSm2Co17[{Mx_,My_,Mz_},Mr_:1.05]:=
Module[{r},
r=Mr/Sqrt[Mx^2+My^2+Mz^2];
radMatLin[{0.005,0.04},{r*Mx,r*My,r*Mz}]]/;
NumberQ[Mx] /; NumberQ[My] /; NumberQ[Mz] /; NumberQ[Mr]

RadMatSm2Co17[Mr_:1.05]:= radMatLin[{0.005,0.04},Mr]/; NumberQ[Mr]

RadMatFerrite[{Mx_,My_,Mz_},Mr_:0.35]:=
Module[{r},
r=Mr/Sqrt[Mx^2+My^2+Mz^2];
radMatLin[{0.07,0.2},{r*Mx,r*My,r*Mz}]]/;
NumberQ[Mx] /; NumberQ[My] /; NumberQ[Mz] /; NumberQ[Mr]

RadMatFerrite[Mr_:0.35]:= radMatLin[{0.07,0.2},Mr]/; NumberQ[Mr]


(* --------- Steels --------- *)

RadMatXc06[] := radMatSatIso[{1.362,0.2605,0.4917},{2118.,63.06,17.138}];

RadMatSteel37[] := radMatSatIso[{1.1488,0.4268,0.4759},{1596.3,133.11,18.713}];

RadMatSteel42[] := radMatSatIso[{1.441,0.2912,0.3316},{968.66,24.65,8.3}];

RadMatAFK502[] := radMatSatIso[{1.788,0.437,0.115},{10485.,241.5,7.43}];

RadMatAFK1[] := radMatSatIso[{1.704,0.493,0.152},{2001.,38.56,1.24}];


(* --------- Boundary Conditions --------- *)

RadTrfZerPara[Grpp_Integer,pt_List,dir_List]:=Module[{tr},
tr=radTrfPlSym[pt,dir];
radTrfCmbL[tr,radTrfInv[]];
radTrfMlt[Grpp,tr,2]
]/; ListQ3[pt] /;ListQ3[dir]

RadTrfZerPerp[obj_Integer,pt_,dir_]:=
radTrfMlt[obj,radTrfPlSym[pt,dir],2] /;
 ListQ3[pt] /; ListQ3[dir]

RadTrfAxisPerm[n_Integer]:=Module[{Pt,r1,r2,r0,i},
Pt={0,0,0};
r1=radTrfRot[Pt,{1,0,0},-N[Pi/2]];
r2=radTrfRot[Pt,{0,1,0},-N[Pi/2]];
radTrfCmbL[r1,r2];
r0=radTrfRot[Pt,{0,0,1},0];
For[i=1,i<=n,i++,radTrfCmbL[r0,r1]];
r0];


(* --------- Shapes --------- *)

RadObjExtRtg[{p1_List,{wx1_,wy1_}},{p2_List,{wx2_,wy2_}},m_List:{0,0,0}]:=
  Module[{x1,x2,y1,y2,z1,z2,v1,v2,v3,v4,v5,v6,v7,v8,f1,f2,f3,f4,f5,f6},
	x1=p1[[1]];y1=p1[[2]];z1=p1[[3]];
	x2=p2[[1]];y2=p2[[2]];z2=p2[[3]];
	v1={x1-wx1/2,y1-wy1/2,z1};
	v2={x1-wx1/2,y1+wy1/2,z1};
	v3={x1+wx1/2,y1+wy1/2,z1};
	v4={x1+wx1/2,y1-wy1/2,z1};
	v5={x2-wx2/2,y2-wy2/2,z2};
	v6={x2-wx2/2,y2+wy2/2,z2};
	v7={x2+wx2/2,y2+wy2/2,z2};
	v8={x2+wx2/2,y2-wy2/2,z2};
	f1={1,2,3,4};
	f2={5,6,7,8};
	f3={1,2,6,5};
	f4={2,3,7,6};
	f5={3,4,8,7};
	f6={4,1,5,8};
	radObjPolyhdr[{v1,v2,v3,v4,v5,v6,v7,v8},{f1,f2,f3,f4,f5,f6},m]
]/;ListQ3[p1]/;NumberQ[wx1]/;NumberQ[wy1]/;ListQ3[p2]/;NumberQ[wx2]/;NumberQ[wy2]/;ListQ3[m]


(* --------- Utility Functions --------- *)

RadObjFullMag[p_List,w_List,m_List,n_List,Grpp_Integer,Mat_Integer,c_List]:=
Module[{Ma},
Ma=radObjRecMag[p,w,m];
radMatApl[Ma,Mat];
radObjDrwAtr[Ma,c,0.001];
radObjDivMag[Ma,n];
radObjAddToCnt[Grpp,{Ma}];
Ma]/;ListQ3[p]/;ListQ3[w]/;ListQ3[m]/;ListQ3[c]

RadSolve[Obj_Integer,Prec_?NumberQ,MaxIterNum_?NumberQ,Method_Integer:0]:=
Module[{inter,rel},
inter= radRlxPre[Obj];
If[Method==0,rel=radRlxAuto[inter,Prec,MaxIterNum],
rel=radRlxAuto[inter,Prec,MaxIterNum,Method]];
radUtiDel[inter];
rel
];

RadUtiSave[elem_,fname_String]:=
Module[{dmp,file},
(*elem can be index of one elememnt or a list of indexes*)
dmp=radUtiDmp[elem,"bin"];
file=OpenWrite[fname,BinaryFormat -> True];
BinaryWrite[file,dmp];
Close[file];
elem
];

RadUtiLoad[fname_String]:=
Module[{dmp,file},
file=OpenRead[fname,BinaryFormat -> True];
dmp=Import[file,"String"]; (*BinaryRead[file];*)
Close[file];
(*can return either index of one element, or a list of indexes, or 0*)
radUtiDmpPrs[dmp]
];


(* --------- Only Usefull for Mathmatica 2.2 --------- *)

RadUtiMem[]:=(
Unprotect[In,Out,InString];
Clear[In,Out,InString];
Protect[In,Out,InString];);


(* --------- Loading Radia.exe --------- *)

If[$VersionNumber >=3 ,(
$HistoryLength=1;
$RadDir2=ToFileName[{$TopDirectory,"AddOns","Applications","Radia"}];
$RadDir1=ToFileName[{$RadDir2},"Radia.exe"];
NotebookOpen[ToFileName[{$RadDir2},"RadiaTopics.nb"]];
)];

If[$VersionNumber <3 ,($RadDir1=StringJoin[$RadDir,"Radia.exe"];)];

If[StringMatchQ[$Version,"Power Macintosh*"]==True,
$RadDir1="'"<>$RadDir1<>"'"];

Off[LinkOpen::linkf,LinkOpen::linke, LinkObject::linkx,Unset::norep,General::spell1];

Uninstall[Radlk];
Radlk = $Failed;
numb=0;
tnumb=20;
Rad::LoadFail="Failed to load Radia.exe";

While[Radlk == $Failed && numb < tnumb,
(Radlk=Install[$RadDir1];numb+=1;Pause[0.8])];

If[Radlk ==$Failed,Message[Rad::LoadFail],
Print["Radia.exe (Re)Loaded at iteration # ",numb],"OK"];

Remove[numb,tnumb,$RadDir2];
(* Remove[$RadDir1]; *)
On[LinkOpen::linkf,LinkObject::linkx,Unset::norep,General::spell1];

radFldLenTol[1. 10^(-9),1. 10^(-9)];


(* --------- Checking Configuration --------- *)

(*
If[StringMatchQ[$Version,"*Power Macintosh*"]
==False && StringMatchQ[$Version,"*Microsoft
 Windows*"]==False  && StringMatchQ[$Version,"*HP-UX
  PA-RISC 3.0*"]==False,Print["This operating system
   is not yet supported",]
];
*)

(*
If[StringMatchQ[$Version,"Power Macintosh 2.0*"]==True 
|| StringMatchQ[$Version,"Power Macintosh 2.1*"]==True 
|| StringMatchQ[$Version,"Microsoft Windows 2*"]==True, 
Print["This version of Mathematica is not supported",]
];
*)

If[StringMatchQ[$Version,"Power Macintosh*"]==True, radUtiIntrptTim[1]];

If[StringMatchQ[$Version,"Microsoft Windows*"]==True, rAdUtiRlxMemAllocMet["tot"]];

RadUtiVer[]:=(
If[radUtiVer[]!= $RadVersion,Print["Wrong Version of Radia.exe"]];
If[radUtiVer[] == $RadVersion,Print["Radia Version: ",$RadVersion," is loaded"]];
)

RadUtiVer[];

Print["Radia is copyright ESRF, France."];
Print["Portions copyright Synchrotron SOLEIL, France."];
Print["Portions copyright Wolfram Research, Inc."];


(* --------- Add things here for testing --------- *)

